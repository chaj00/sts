<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<resources mapping="/images/**" location="/images/" />

	<!-- 어노테이션을 사용하기 위한 설정 -->
	<context:component-scan base-package="kr.kitri" />
	<context:component-scan base-package="test" />
	<context:component-scan base-package="emp" />

	
	<!--============== 뷰리졸버에 대한 등록(기본 파일시스템으로 연결,타일즈기반)========================== -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<!-- tiles작업할 수 있도록 설정 -->
	<beans:bean id="tilesConfigurer" 
				class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/config/tiles-config.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	

	<beans:bean id="tilesviewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView"/>
		<beans:property name="order" value="1"/>	
	</beans:bean>
	
	
	<beans:bean id="con" class="org.springframework.jndi.JndiObjectFactoryBean">
 		<beans:property name="jndiName" value="jdbc/myspring"/>
 		<beans:property name="resourceRef" value="true"/>
 	</beans:bean>
 	
 	
	<beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:constructor-arg ref="con"/>		
	</beans:bean>	
	
	<!-- ========================mybatis에 관련된 작업============================= -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="con"/>

		<!-- 마이바티스 mapper 파일을 설정xml파일을 만들어서 적용할떄 -->
		<beans:property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"/>
		
		<!-- 마이바티스 mapper 파일을 클래스패스 아래 설정 할떄 -->
		<!-- <beans:property name="mapperLocations" value="classpath:mapper/*.xml"/> --> 

	</beans:bean>
	
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"/>
	</beans:bean>			
	
	<!-- ========================트랜젝션에 대한 처리============================ -->
	<!-- 1. spring내부에서 jdbc를 이용할떄 트랜잭션 처리를 간편하게 작업할 수 있도록 지원되는 클래스를 등록 -->
	<beans:bean id="transactionManager" 
				class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- db와 연결되어 있어야 트랜잭션 처리를 할 수 있고 커넥션에 있는 트랜잭션 관리 메소드를 이용 -->
		<beans:property name="dataSource" ref="con"/>	
	</beans:bean>

	<!-- 2.트랜잭션에 대한 처리를 aop적용 
			1) Advice등록(xml에서 등록) 트랜잭션을 xml로 처리하는 방법-->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!--  트랜잭션을 적용할때 매소드에 대한 정보(insert로 끝나는 매소드를 호출할떄 Exception이 발생하면 rollback시켜라 -->
		<tx:attributes>
			<tx:method name="*insert" rollback-for="Exception"/>
		</tx:attributes>
	
	</tx:advice>
	
			<!-- 2)aop적용 -->	
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(public * emp.service.MyEmpServiceImpl.*(..))" id="trans"/>
		<aop:advisor id="txadvisor" advice-ref="txAdvice" pointcut-ref="trans"/>
	</aop:config>
	
	
	<!-- 인터셉터등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/mybatiscount.do"/>
			<mapping path="/mybatisinsert.do"/>
			<beans:bean class="etc.controller.TimeCheckInterceptor"/>
		</interceptor>
	
		<interceptor>
			<mapping path="/mybatislist.do"/>
			<mapping path="/mybatissearch.do"/>
			<beans:bean class="etc.controller.LoginCheckInterceptor"/>
		</interceptor>
	</interceptors>

</beans:beans>
